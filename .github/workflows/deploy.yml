name: Deploy Cookix Production
on:
  workflow_run:
    workflows: ['E2E Tests']
    types:
      - completed
  push:
    branches: [ master ]  # ou changez en "main" selon votre branche principale

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: './package-lock.json'

      - name: Install dependencies
        run: npm ci --silent

      - name: Install scraper dependencies
        run: |
          cd scripts/scraper
          npm ci --silent
          cd ../..

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build project
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.OVH_SSH_KEY }}
          known_hosts: 'placeholder'

      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.OVH_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Copy configuration and build files
        run: |
          rsync -avz --exclude 'node_modules' --exclude '.git' ./ ${{ secrets.OVH_SERVER_USER }}@${{ secrets.OVH_SERVER_HOST }}:/var/www/cookix/

      - name: Create .env file
        run: |
          ssh ${{ secrets.OVH_SERVER_USER }}@${{ secrets.OVH_SERVER_HOST }} 'cd /var/www/cookix && echo "
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          ROOT_PASSWORD=${{ secrets.ROOT_PASSWORD }}
          DATABASE_URL=mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@db:3306/${{ secrets.DB_NAME }}
          " > .env'

      - name: Deploy to production
        run: |
          ssh ${{ secrets.OVH_SERVER_USER }}@${{ secrets.OVH_SERVER_HOST }} 'cd /var/www/cookix && bash -s' << 'EOF'
          # Nettoyer les ressources Docker avant le déploiement
          docker system prune -f --volumes

          # Arrêter uniquement les conteneurs de l'application (sans arrêter d'autres applications)
          docker compose -f docker-compose.prod.yml down

          # Reconstruire et démarrer les conteneurs en mode production
          docker compose -f docker-compose.prod.yml up -d --build

          # Nettoyer les images Docker inutilisées pour libérer de l'espace disque
          docker image prune -f
          EOF