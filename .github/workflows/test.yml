name: E2E Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/cookix-app # ex: ghcr.io/votre-nom/votre-repo

jobs:
  e2e-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      # Étape 1 : Créer le fichier .env (il sera utilisé par docker-compose)
      - name: Create .env file for testing
        run: |
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" > .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "ROOT_PASSWORD=${{ secrets.ROOT_PASSWORD }}" >> .env
          echo "DATABASE_URL_TEST=mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@db:3306/${{ secrets.DB_NAME }}" >> .env
          echo "CHRONODRIVE_EMAIL=${{ secrets.CHRONODRIVE_EMAIL }}" >> .env
          echo "CHRONODRIVE_PASSWORD=${{ secrets.CHRONODRIVE_PASSWORD }}" >> .env
          echo "CHRONODRIVE_API_KEY=${{ secrets.CHRONODRIVE_API_KEY }}" >> .env
          echo "CHRONODRIVE_API_KEY_CART=${{ secrets.CHRONODRIVE_API_KEY_CART }}" >> .env
          echo "CHRONODRIVE_API_KEY_USER=${{ secrets.CHRONODRIVE_API_KEY_USER }}" >> .env

      - name: Set Docker Image Tag
        run: echo "DOCKER_IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_ENV
      # Étape 2 : Lancer l'environnement de test (uniquement les services nécessaires)
      - name: Build and Start Docker Environment
        run: |
          # On ne démarre que les services 'app' et 'db', en ignorant 'scraper'.
          # On utilise le docker-compose de production.
          docker compose -f docker-compose.prod.yml up -d --build app db

      # Étape 3 : Préparer la base de données EN UTILISANT DOCKER EXEC
      - name: Setup Database for Tests
        run: |
          echo "--> Waiting for database container to be ready..."
          # Boucle robuste pour attendre que la BDD soit saine.
          # Le nom du conteneur est souvent préfixé par le nom du projet, soyons plus robustes.
          DB_CONTAINER_NAME=$(docker compose -f docker-compose.prod.yml ps -q db)
          until [ "$(docker inspect -f {{.State.Health.Status}} $DB_CONTAINER_NAME)" = "healthy" ]; do
              echo "Database is unavailable - sleeping"
              sleep 2
          done
          echo "--> Database is ready."

          # On définit une variable locale pour l'URL pour la clarté.
          # Cette URL est destinée à être utilisée A L'INTERIEUR du réseau Docker.
          # Elle utilise 'db:3306', le nom du service Docker.
          DATABASE_URL_FOR_CONTAINER="mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@db:3306/${{ secrets.DB_NAME }}"

          # On exécute les commandes Prisma en passant explicitement la variable DATABASE_URL.
          echo "--> Running migrations inside the container..."
          docker compose exec -T -e DATABASE_URL=$DATABASE_URL_FOR_CONTAINER app npx prisma migrate deploy

          echo "--> Seeding test data inside the container..."
          docker compose exec -T -e DATABASE_URL=$DATABASE_URL_FOR_CONTAINER app node prisma/seed.test.js

      # Étape 4 : Lancer les tests Playwright (inchangé)
      - name: Run Playwright Tests
        run: npx playwright test
        env:
          # Les tests s'exécutent sur le runner et ciblent l'application via le port exposé.
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
          DATABASE_URL_TEST: "mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@localhost:3306/${{ secrets.DB_NAME }}"

      - name: Check for Playwright report files (DEBUG)
        if: always()
        run: |
          echo "Listing files to see if the report was generated:"
          ls -R

      # Étape 5 & 6 (Rapports et Nettoyage)
      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Cleanup Docker Environment
        if: always()
        run: |
          echo "--> Stopping services and cleaning up..."
          # La clé est ici : `-v` supprime les volumes anonymes ET nommés associés au compose.
          # Cela garantit que `cookix_db_data` est détruit, pour un test propre la prochaine fois.
          docker compose -f docker-compose.prod.yml down -v --remove-orphans
