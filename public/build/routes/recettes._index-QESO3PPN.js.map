{
  "version": 3,
  "sources": ["../../../app/routes/recettes._index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/recettes._index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/recettes._index.tsx\");\n  import.meta.hot.lastModified = \"1743361479615.6384\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { Form, useLoaderData, useSubmit, useNavigation, useSearchParams, useFetcher } from \"@remix-run/react\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport BoxRecipe from \"~/components/BoxRecipe\";\nimport Layout from \"~/components/Layout\";\n\n// Type pour nos filtres\n\n// Hook pour le debounce (recherche)\nfunction useDebounce(value, delay) {\n  _s();\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n}\n_s(useDebounce, \"KDuPAtDOgxm8PU6legVJOb3oOmA=\");\nexport const meta = () => {\n  return [{\n    title: \"Toutes les recettes - Cookix\"\n  }, {\n    name: \"description\",\n    content: \"D\u00E9couvrez et filtrez toutes nos recettes pour Monsieur Cuisine Smart\"\n  }];\n};\nexport async function loader({\n  request\n}) {\n  // R\u00E9cup\u00E9rer les param\u00E8tres de filtrage depuis l'URL\n  const url = new URL(request.url);\n  const categoryId = url.searchParams.get(\"categoryId\") || \"\";\n  const mealType = url.searchParams.get(\"mealType\") || \"\";\n  const searchQuery = url.searchParams.get(\"search\") || \"\";\n  const maxPreparationTime = url.searchParams.get(\"maxPreparationTime\") || null;\n  const sortBy = url.searchParams.get(\"sortBy\") || \"title\";\n  const sortDirection = url.searchParams.get(\"sortDirection\") || \"asc\";\n  const randomParam = url.searchParams.get(\"random\") || \"true\"; // Par d\u00E9faut \u00E0 \"true\"\n  const random = randomParam === \"true\";\n  console.log(\"_______________________caca\", mealType);\n  // Param\u00E8tres pour le scroll infini\n  const page = parseInt(url.searchParams.get(\"page\") || \"1\");\n  const perPage = 12; // Nombre r\u00E9duit pour un chargement mobile optimal\n  const offset = (page - 1) * perPage;\n\n  // Construire l'URL de l'API recipes avec tous les param\u00E8tres\n  const apiUrl = new URL(`${request.url.split('/').slice(0, 3).join('/')}/api/recipes`);\n\n  // Ajouter les param\u00E8tres de filtrage \u00E0 l'URL de l'API\n  if (searchQuery) apiUrl.searchParams.append(\"search\", searchQuery);\n  if (categoryId) apiUrl.searchParams.append(\"categoryId\", categoryId);\n  if (mealType) apiUrl.searchParams.append(\"mealType\", mealType);\n  if (maxPreparationTime) apiUrl.searchParams.append(\"maxPreparationTime\", maxPreparationTime.toString());\n  if (random) apiUrl.searchParams.append(\"random\", \"true\");\n\n  // Ajouter les param\u00E8tres de tri\n  apiUrl.searchParams.append(\"sort\", sortBy);\n  apiUrl.searchParams.append(\"dir\", sortDirection);\n\n  // Ajouter les param\u00E8tres de pagination adapt\u00E9s au scroll infini\n  apiUrl.searchParams.append(\"limit\", perPage.toString());\n  apiUrl.searchParams.append(\"offset\", offset.toString());\n\n  // Envoyer la requ\u00EAte \u00E0 l'API\n  const cookies = request.headers.get(\"Cookie\");\n  try {\n    const response = await fetch(apiUrl.toString(), {\n      method: \"GET\",\n      headers: {\n        Cookie: cookies || \"\"\n      }\n    });\n    const apiResponse = await response.json();\n    if (!apiResponse.success) {\n      throw new Error(apiResponse.message || \"Erreur lors du chargement des recettes\");\n    }\n\n    // R\u00E9cup\u00E9rer les cat\u00E9gories\n    const apiUrlForCategories = new URL(`${request.url.split('/').slice(0, 3).join('/')}/api/categories`);\n    const categoriesResponse = await fetch(apiUrlForCategories.toString(), {\n      headers: {\n        Cookie: cookies || \"\"\n      }\n    });\n    let categoryOptions = [];\n    if (categoriesResponse.ok) {\n      const categoriesData = await categoriesResponse.json();\n      categoryOptions = categoriesData.categories || [];\n    }\n\n    // R\u00E9cup\u00E9rer les types de repas\n    const apiUrlForMealTypes = new URL(`${request.url.split('/').slice(0, 3).join('/')}/api/mealtypes`);\n    const mealTypesResponse = await fetch(apiUrlForMealTypes.toString(), {\n      headers: {\n        Cookie: cookies || \"\"\n      }\n    });\n    let mealTypeOptions = [];\n    if (mealTypesResponse.ok) {\n      const mealTypesData = await mealTypesResponse.json();\n      mealTypeOptions = mealTypesData.mealTypes || [];\n    }\n    const totalRecipes = apiResponse.pagination.total;\n    return json({\n      recipes: apiResponse.recipes,\n      pagination: {\n        currentPage: page,\n        totalPages: Math.ceil(totalRecipes / perPage),\n        totalRecipes: totalRecipes,\n        hasMore: offset + apiResponse.recipes.length < totalRecipes // V\u00E9rifie s'il reste des recettes \u00E0 charger\n      },\n      filters: {\n        categoryOptions,\n        mealTypeOptions,\n        preparationTimeMax: 120\n      },\n      appliedFilters: {\n        search: searchQuery,\n        maxPreparationTime: maxPreparationTime ? parseInt(maxPreparationTime) : null,\n        categoryId: categoryId ? parseInt(categoryId) : null,\n        mealType,\n        sortBy,\n        sortDirection,\n        random\n      },\n      error: false\n    });\n  } catch (error) {\n    console.error(\"Erreur lors du chargement des recettes:\", error);\n    return json({\n      recipes: [],\n      pagination: {\n        currentPage: 1,\n        totalPages: 0,\n        totalRecipes: 0,\n        hasMore: false\n      },\n      filters: {\n        categoryOptions: [],\n        mealTypeOptions: [],\n        preparationTimeMax: 120\n      },\n      appliedFilters: {\n        search: searchQuery,\n        mealType,\n        categoryId: null,\n        maxPreparationTime: maxPreparationTime ? parseInt(maxPreparationTime) : null,\n        sortBy: \"title\",\n        sortDirection: \"asc\"\n      },\n      error: error instanceof Error ? error.message : \"Impossible de charger les recettes.\"\n    });\n  }\n}\nexport default function RecipesIndex() {\n  _s2();\n  const {\n    recipes: initialRecipes,\n    pagination,\n    filters,\n    appliedFilters,\n    error\n  } = useLoaderData();\n  const navigation = useNavigation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const submit = useSubmit();\n  const moreFetcher = useFetcher();\n\n  // \u00C9tats pour g\u00E9rer le scroll infini\n  const [recipes, setRecipes] = useState(initialRecipes);\n  const [currentPage, setCurrentPage] = useState(pagination.currentPage);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  // \u00C9tats pour les filtres\n  const [search, setSearch] = useState(appliedFilters.search);\n  const [filtersVisible, setFiltersVisible] = useState(false);\n  const [maxPreparationTime, setMaxPreparationTime] = useState(appliedFilters.maxPreparationTime);\n  const [category, setCategory] = useState(appliedFilters.categoryId?.toString() || \"\");\n  const [mealType, setMealType] = useState(appliedFilters.mealType);\n  const [sortBy, setSortBy] = useState(appliedFilters.sortBy);\n  const [sortDirection, setSortDirection] = useState(appliedFilters.sortDirection);\n  //const [randomEnabled, setRandomEnabled] = useState(true)\n  const [randomEnabled, setRandomEnabled] = useState(appliedFilters.random !== false);\n\n  // Debounce la recherche\n  const debouncedSearch = useDebounce(search, 400);\n\n  // R\u00E9f\u00E9rence pour le formulaire\n  const formRef = useRef(null);\n\n  // Effet pour charger plus de recettes lors du scroll\n  const loadMoreRecipes = useCallback(() => {\n    // \u00C9viter de charger plus si on est d\u00E9j\u00E0 en train de charger ou s'il n'y a plus rien \u00E0 charger\n    if (!pagination.hasMore || moreFetcher.state !== \"idle\" || isLoadingMore || navigation.state !== \"idle\") {\n      return;\n    }\n    setIsLoadingMore(true);\n    const nextPage = currentPage + 1;\n\n    // Construire la recherche pour la page suivante\n    const params = new URLSearchParams(searchParams);\n    params.set(\"page\", nextPage.toString());\n\n    // Utiliser le fetcher de Remix\n    moreFetcher.load(`/recettes?${params.toString()}`);\n  }, [currentPage, pagination.hasMore, moreFetcher, isLoadingMore, searchParams, navigation.state]);\n  useEffect(() => {\n    if (moreFetcher.state === \"idle\" && moreFetcher.data && isLoadingMore) {\n      const fetcherData = moreFetcher.data;\n      if (fetcherData.recipes && fetcherData.recipes.length > 0) {\n        // Ajouter les nouvelles recettes\n        setRecipes(prev => [...prev, ...fetcherData.recipes]);\n        setCurrentPage(prev => prev + 1);\n      }\n      setIsLoadingMore(false);\n    }\n  }, [moreFetcher.state, moreFetcher.data, isLoadingMore]);\n\n  // Ref pour l'intersection observer (d\u00E9tecter quand on atteint le bas de la page)\n  // D\u00E9finir un observateur d'intersection simplifi\u00E9\n  const observer = useRef(null);\n  const bottomElementRef = useRef(null);\n\n  // Configurer l'observateur\n  useEffect(() => {\n    if (observer.current) {\n      observer.current.disconnect();\n    }\n    const loadMore = () => {\n      if (!isLoadingMore && pagination.hasMore) {\n        loadMoreRecipes();\n      }\n    };\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        loadMore();\n      }\n    }, {\n      rootMargin: '100px',\n      threshold: 0.1\n    });\n    const currentElement = bottomElementRef.current;\n    if (currentElement) {\n      observer.current.observe(currentElement);\n    }\n    return () => {\n      if (observer.current && currentElement) {\n        observer.current.unobserve(currentElement);\n        observer.current.disconnect();\n      }\n    };\n  }, [loadMoreRecipes, isLoadingMore, pagination.hasMore]);\n\n  // Effet pour soumettre le formulaire lorsque la recherche debounc\u00E9e change\n  useEffect(() => {\n    if (debouncedSearch !== appliedFilters.search && formRef.current) {\n      // Construire une nouvelle URL avec les param\u00E8tres de recherche\n      const params = new URLSearchParams();\n\n      // Ajouter les param\u00E8tres non vides\n      if (debouncedSearch) params.set(\"search\", debouncedSearch);\n      if (category) params.set(\"categoryId\", category);\n      if (mealType) params.set(\"mealType\", mealType);\n      if (maxPreparationTime) params.set(\"maxPreparationTime\", maxPreparationTime.toString());\n      params.set(\"sortBy\", sortBy);\n      params.set(\"sortDirection\", sortDirection);\n      params.set(\"page\", \"1\"); // Retour \u00E0 la premi\u00E8re page lors d'une recherche\n\n      // Mettre \u00E0 jour les params de l'URL\n      setSearchParams(params);\n\n      // R\u00E9initialiser l'\u00E9tat local\n      setCurrentPage(1);\n      setRecipes([]); // Vider pour \u00E9viter les doublons\n    }\n  }, [debouncedSearch, appliedFilters.search, setSearchParams]);\n\n  // Effets pour la mise \u00E0 jour des \u00E9tats lors des changements de filtres\n  useEffect(() => {\n    if (navigation.state === \"idle\") {\n      // Mise \u00E0 jour des recettes lorsque les donn\u00E9es sont recharg\u00E9es\n      if (pagination.currentPage === 1) {\n        setRecipes(initialRecipes);\n      }\n    }\n  }, [initialRecipes, navigation.state, pagination.currentPage]);\n\n  // Gestion des changements de recherche\n  const handleSearchChange = e => {\n    setSearch(e.target.value);\n  };\n\n  //Gestion des filtres de la recherche\n  const updateFilter = useCallback((key, value) => {\n    const params = new URLSearchParams(searchParams);\n\n    // Mettre \u00E0 jour ou supprimer le param\u00E8tre selon la valeur\n    if (value) {\n      params.set(key, value);\n    } else {\n      params.delete(key);\n    }\n\n    // R\u00E9initialiser la page \u00E0 1 lors d'un changement de filtre\n    params.set(\"page\", \"1\");\n\n    // Mettre \u00E0 jour l'URL\n    setSearchParams(params);\n  }, [searchParams, setSearchParams]);\n\n  // R\u00E9initialiser les filtres\n  const resetFilters = useCallback(() => {\n    setSearch(\"\");\n    setMaxPreparationTime(null);\n    setCategory(\"\");\n    setMealType(\"\");\n    setSortBy(\"title\");\n    setSortDirection(\"asc\");\n    setRandomEnabled(true);\n\n    // Soumettre le formulaire avec des valeurs vides\n    setSearchParams({\n      sortBy: \"title\",\n      sortDirection: \"asc\",\n      random: \"true\",\n      page: \"1\"\n    });\n  }, [setSearchParams]);\n\n  // \u00C9tat de chargement\n  const isLoading = navigation.state === \"loading\" || navigation.state === \"submitting\";\n  useEffect(() => {\n    // R\u00E9initialiser les recettes lors de changements de filtres\n    if (navigation.state === \"loading\" && navigation.formData) {\n      setRecipes([]); // Vider le tableau lorsqu'une nouvelle requ\u00EAte est en cours\n      setCurrentPage(1);\n    }\n\n    // Mise \u00E0 jour des recettes lorsque les donn\u00E9es sont recharg\u00E9es\n    if (navigation.state === \"idle\" && initialRecipes) {\n      if (pagination.currentPage === 1) {\n        setRecipes(initialRecipes);\n      }\n    }\n  }, [navigation.state, navigation.formData, initialRecipes, pagination.currentPage]);\n  return <Layout>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* En-t\u00EAte avec nombre de recettes */}\n        <div className=\"mb-3 text-center\">\n          <h2 className=\"text-xl font-bold text-gray-900\">\n            {pagination.totalRecipes} recettes \u00E0 d\u00E9couvrir\n          </h2>\n          <p className=\"text-sm text-gray-600\">\n            Trouvez la recette parfaite pour votre Monsieur Cuisine Smart\n          </p>\n        </div>\n\n        {/* Barre de recherche fixe en haut */}\n        <div className=\"sticky top-0 z-10 bg-white pb-3 pt-1 shadow-sm\">\n          <div className=\"relative\">\n            <input type=\"text\" name=\"search\" id=\"search\" placeholder=\"Rechercher une recette...\" value={search} onChange={handleSearchChange} className=\"block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-rose-500 focus:border-rose-500 text-base\" />\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n              </svg>\n            </div>\n\n            {/* Bouton pour afficher les filtres */}\n            <button type=\"button\" onClick={() => setFiltersVisible(true)} className=\"absolute inset-y-0 right-0 px-3 flex items-center\" aria-label=\"Filtrer les recettes\">\n              <svg className=\"w-5 h-5 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\" />\n              </svg>\n            </button>\n          </div>\n\n          {/* Badges de filtres actifs */}\n          {(category || mealType || maxPreparationTime) && <div className=\"flex flex-wrap gap-2 mt-2\">\n              {category && <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800\">\n                  {filters.categoryOptions.find(c => c.id.toString() === category)?.title || 'Cat\u00E9gorie'}\n                  <button type=\"button\" onClick={() => {\n              setCategory(\"\");\n              updateFilter(\"categoryId\", \"\");\n            }} className=\"ml-1.5 h-4 w-4 rounded-full inline-flex items-center justify-center text-indigo-400 hover:bg-indigo-200 hover:text-indigo-600\">\n                    <svg className=\"h-3 w-3\" viewBox=\"0 0 12 12\" fill=\"none\" stroke=\"currentColor\">\n                      <path d=\"M8 4l-4 4M4 4l4 4\" strokeWidth=\"2\" strokeLinecap=\"round\" />\n                    </svg>\n                  </button>\n                </span>}\n\n              {mealType && <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                  {mealType}\n                  <button type=\"button\" onClick={() => {\n              setMealType(\"\");\n              updateFilter(\"mealType\", \"\");\n            }} className=\"ml-1.5 h-4 w-4 rounded-full inline-flex items-center justify-center text-green-400 hover:bg-green-200 hover:text-green-600\">\n                    <svg className=\"h-3 w-3\" viewBox=\"0 0 12 12\" fill=\"none\" stroke=\"currentColor\">\n                      <path d=\"M8 4l-4 4M4 4l4 4\" strokeWidth=\"2\" strokeLinecap=\"round\" />\n                    </svg>\n                  </button>\n                </span>}\n\n              {maxPreparationTime && <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-amber-100 text-amber-800\">\n                  Max {maxPreparationTime} min\n                  <button type=\"button\" onClick={() => {\n              setMaxPreparationTime(null);\n              updateFilter(\"maxPreparationTime\", null);\n            }} className=\"ml-1.5 h-4 w-4 rounded-full inline-flex items-center justify-center text-amber-400 hover:bg-amber-200 hover:text-amber-600\">\n                    <svg className=\"h-3 w-3\" viewBox=\"0 0 12 12\" fill=\"none\" stroke=\"currentColor\">\n                      <path d=\"M8 4l-4 4M4 4l4 4\" strokeWidth=\"2\" strokeLinecap=\"round\" />\n                    </svg>\n                  </button>\n                </span>}\n\n              <button type=\"button\" onClick={resetFilters} className=\"text-xs text-gray-500 hover:text-gray-700 underline\">\n                Tout effacer\n              </button>\n            </div>}\n        </div>\n\n        {/* Affichage des recettes */}\n        {error ? <div className=\"my-8 bg-red-50 border-l-4 border-red-500 p-4 text-red-700 text-center\">\n            {error}\n          </div> : <>\n            {/* Grille des recettes - optimis\u00E9e pour mobile */}\n            {recipes.length === 0 && !isLoading ? <div className=\"text-center py-12 bg-white rounded-lg shadow-md\">\n                <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                <h3 className=\"mt-2 text-lg font-medium text-gray-900\">Aucune recette trouv\u00E9e</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  Essayez de modifier vos filtres pour voir plus de r\u00E9sultats.\n                </p>\n                <div className=\"mt-6\">\n                  <button onClick={resetFilters} className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-rose-600 hover:bg-rose-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500\">\n                    R\u00E9initialiser les filtres\n                  </button>\n                </div>\n              </div> : <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mt-2\">\n                {recipes.map((recipe, index) => <BoxRecipe key={`${recipe.id}-${index}`} recipe={recipe} />)}\n              </div>}\n\n            {/* \u00C9l\u00E9ment observ\u00E9 pour le scroll infini */}\n            {pagination.hasMore && recipes.length > 0 && <div ref={bottomElementRef} className=\"h-20 w-full my-4 flex justify-center items-center\">\n                {isLoadingMore && <div className=\"flex flex-col items-center\">\n                    <svg className=\"animate-spin h-8 w-8 text-rose-500 mb-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    <span className=\"text-sm text-gray-500\">Chargement d'autres recettes...</span>\n                  </div>}\n              </div>}\n          </>}\n\n        {/* Formulaire cach\u00E9 pour les filtres */}\n        <Form ref={formRef} method=\"get\" id=\"filter-form\" className=\"hidden\">\n          <input type=\"hidden\" name=\"search\" value={search} />\n          <input type=\"hidden\" name=\"categoryId\" value={category} />\n          <input type=\"hidden\" name=\"mealType\" value={mealType} />\n          {maxPreparationTime && <input type=\"hidden\" name=\"maxPreparationTime\" value={maxPreparationTime} />}\n          <input type=\"hidden\" name=\"sortBy\" value={sortBy} />\n          <input type=\"hidden\" name=\"sortDirection\" value={sortDirection} />\n          <input type=\"hidden\" name=\"random\" value={randomEnabled.toString()} />\n          <input type=\"hidden\" name=\"page\" value=\"1\" />\n        </Form>\n\n        {/* Panneau de filtres mobile */}\n        {filtersVisible && <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 z-50 flex items-end\">\n            <div className=\"bg-white w-full rounded-t-xl p-5 transform transition-transform duration-300 ease-in-out max-h-[90vh] overflow-auto\">\n              {/* En-t\u00EAte du panneau de filtres */}\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-semibold\">Filtres</h3>\n                <button onClick={() => setFiltersVisible(false)} className=\"p-2 rounded-full hover:bg-gray-100\">\n                  <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n\n              {/* Contenu des filtres */}\n              <div className=\"space-y-5\">\n                {/* Filtre de cat\u00E9gories */}\n                <div>\n                  <label htmlFor=\"categoryId\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Cat\u00E9gorie\n                  </label>\n                  <select id=\"categoryId\" name=\"categoryId\" value={category} onChange={e => {\n                setCategory(e.target.value);\n                updateFilter(\"categoryId\", e.target.value);\n              }} className=\"block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-rose-500 focus:border-rose-500 sm:text-sm\">\n                    <option value=\"\">Toutes les cat\u00E9gories</option>\n                    {filters.categoryOptions?.map(option => <option key={option.id} value={option.id.toString()}>\n                        {option.title}\n                      </option>)}\n                  </select>\n                </div>\n\n                {/* Filtre de type de repas */}\n                <div>\n                  <label htmlFor=\"mealType\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Type de repas\n                  </label>\n                  <select id=\"mealType\" name=\"mealType\" value={mealType} onChange={e => {\n                setMealType(e.target.value);\n                updateFilter(\"mealType\", e.target.value);\n              }} className=\"block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-rose-500 focus:border-rose-500 sm:text-sm\">\n                    <option value=\"\">Tous les types</option>\n                    {filters.mealTypeOptions?.map(option => <option key={option.title} value={option.title}>\n                        {option.title}\n                      </option>)}\n                  </select>\n                </div>\n\n                {/* Temps de pr\u00E9paration */}\n                <div>\n                  <label htmlFor=\"maxPreparationTime\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Temps de pr\u00E9paration (max {maxPreparationTime || filters.preparationTimeMax} min)\n                  </label>\n                  <input type=\"range\" id=\"maxPreparationTime\" name=\"maxPreparationTime\" min=\"0\" max={filters.preparationTimeMax} step=\"10\" value={maxPreparationTime || filters.preparationTimeMax} onChange={e => {\n                const newMaxTime = parseInt(e.target.value);\n                setMaxPreparationTime(newMaxTime);\n                updateFilter(\"maxPreparationTime\", newMaxTime.toString());\n                if (formRef.current) submit(formRef.current);\n              }} className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-rose-500\" />\n                  <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                    <span>0 min</span>\n                    <span>{filters.preparationTimeMax} min</span>\n                  </div>\n                </div>\n\n                {/* Option de tri al\u00E9atoire */}\n                <div>\n                  <div className=\"flex items-center justify-between\">\n                    <label htmlFor=\"random\" className=\"text-sm font-medium text-gray-700\">\n                      Affichage al\u00E9atoire\n                    </label>\n                    <button type=\"button\" onClick={() => {\n                  setRandomEnabled(!randomEnabled);\n                  if (formRef.current) {\n                    setTimeout(() => submit(formRef.current), 0);\n                  }\n                }} className={`relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none ${randomEnabled ? 'bg-rose-500' : 'bg-gray-200'}`} role=\"switch\" aria-checked={randomEnabled}>\n                      <span className=\"sr-only\">Activer l'affichage al\u00E9atoire</span>\n                      <span aria-hidden=\"true\" className={`pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200 ${randomEnabled ? 'translate-x-5' : 'translate-x-0'}`}></span>\n                    </button>\n                  </div>\n                  <p className=\"mt-1 text-xs text-gray-500\">\n                    Afficher les recettes dans un ordre al\u00E9atoire pour favoriser la d\u00E9couverte\n                  </p>\n                </div>\n\n                {/* Tri */}\n                <div>\n                  <label htmlFor=\"sort\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Trier par\n                  </label>\n                  <select id=\"sort\" name=\"sort\" value={`${sortBy}-${sortDirection}`} onChange={e => {\n                const [newSortBy, newSortDirection] = e.target.value.split(\"-\");\n                setSortBy(newSortBy);\n                setSortDirection(newSortDirection);\n                if (formRef.current) submit(formRef.current);\n              }} className=\"block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-rose-500 focus:border-rose-500 sm:text-sm\">\n                    <option value=\"title-asc\">Titre (A-Z)</option>\n                    <option value=\"title-desc\">Titre (Z-A)</option>\n                    <option value=\"preparationTime-asc\">Temps de pr\u00E9paration (croissant)</option>\n                    <option value=\"preparationTime-desc\">Temps de pr\u00E9paration (d\u00E9croissant)</option>\n                    <option value=\"note-desc\">Note (d\u00E9croissant)</option>\n                    <option value=\"note-asc\">Note (croissant)</option>\n                  </select>\n                </div>\n\n                {/* Boutons d'action */}\n                <div className=\"flex space-x-3 pt-3\">\n                  <button type=\"button\" onClick={resetFilters} className=\"flex-1 py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\">\n                    R\u00E9initialiser\n                  </button>\n                  <button type=\"button\" onClick={() => setFiltersVisible(false)} className=\"flex-1 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-rose-600 hover:bg-rose-700\">\n                    Appliquer\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>}\n      </div>\n    </Layout>;\n}\n_s2(RecipesIndex, \"uCgYJk5apCXMQi3s7OpCKlwxSik=\", false, function () {\n  return [useLoaderData, useNavigation, useSearchParams, useSubmit, useFetcher, useDebounce];\n});\n_c = RecipesIndex;\nvar _c;\n$RefreshReg$(_c, \"RecipesIndex\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
