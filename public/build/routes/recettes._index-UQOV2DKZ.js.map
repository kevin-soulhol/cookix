{
  "version": 3,
  "sources": ["../../../app/routes/recettes._index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/recettes._index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/recettes._index.tsx\");\n  import.meta.hot.lastModified = \"1743004810495.3738\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, useLoaderData, useNavigate, useNavigation, useSubmit } from \"@remix-run/react\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport BoxRecipe from \"~/components/BoxRecipe\";\nimport Layout from \"~/components/Layout\";\n\n// Types pour nos filtres\n\nexport const meta = () => {\n  return [{\n    title: \"Toutes les recettes - Cookix\"\n  }, {\n    name: \"description\",\n    content: \"D\u00E9couvrez et filtrez toutes nos recettes pour Monsieur Cuisine Smart\"\n  }];\n};\nexport async function loader({\n  request\n}) {\n  // R\u00E9cup\u00E9rer les param\u00E8tres de filtrage depuis l'URL\n  const url = new URL(request.url);\n  const categoryId = url.searchParams.get(\"categoryId\") || \"\";\n  const mealType = url.searchParams.get(\"mealType\") || \"\";\n  const searchQuery = url.searchParams.get(\"search\") || \"\";\n  const maxPreparationTime = url.searchParams.get(\"maxPreparationTime\") || null;\n  const sortBy = url.searchParams.get(\"sortBy\") || \"title\";\n  const sortDirection = url.searchParams.get(\"sortDirection\") || \"asc\";\n  const page = url.searchParams.get(\"page\") || \"1\";\n  const perPage = \"300\"; // nombre de recettes par page\n\n  // Construire l'URL de l'API recipes avec tous les param\u00E8tres\n  const apiUrl = new URL(`${request.url.split('/').slice(0, 3).join('/')}/api/recipes`);\n\n  // Ajouter les param\u00E8tres de filtrage \u00E0 l'URL de l'API\n  if (searchQuery) apiUrl.searchParams.append(\"search\", searchQuery);\n  if (categoryId) apiUrl.searchParams.append(\"categoryId\", categoryId);\n  if (mealType) apiUrl.searchParams.append(\"mealType\", mealType);\n  if (maxPreparationTime) apiUrl.searchParams.append(\"maxPreparationTime\", maxPreparationTime.toString());\n\n  // Ajouter les param\u00E8tres de tri\n  apiUrl.searchParams.append(\"sort\", sortBy);\n  apiUrl.searchParams.append(\"dir\", sortDirection);\n\n  // Ajouter les param\u00E8tres de pagination\n  apiUrl.searchParams.append(\"limit\", perPage);\n  apiUrl.searchParams.append(\"offset\", ((parseInt(page) - 1) * parseInt(perPage)).toString());\n\n  // Envoyer la requ\u00EAte \u00E0 l'API\n  const cookies = request.headers.get(\"Cookie\");\n  try {\n    const response = await fetch(apiUrl.toString(), {\n      method: \"GET\",\n      headers: {\n        Cookie: cookies || \"\" // Transmettre les cookies pour l'authentification\n      }\n    });\n    const apiResponse = await response.json();\n    if (!apiResponse.success) {\n      throw new Error(apiResponse.message || \"Erreur lors du chargement des recettes\");\n    }\n\n    //R\u00E9cup\u00E9rer les diff\u00E9rentes cat\u00E9gories\n    const apiUrlForCategories = new URL(`${request.url.split('/').slice(0, 3).join('/')}/api/categories`);\n    const categoriesResponse = await fetch(apiUrlForCategories.toString(), {\n      headers: {\n        Cookie: cookies || \"\"\n      }\n    });\n    let categoryOptions = [];\n    if (categoriesResponse.ok) {\n      const categoriesData = await categoriesResponse.json();\n      categoryOptions = categoriesData.categories || [];\n    }\n\n    //R\u00E9cup\u00E9rer les diff\u00E9rents types de repas\n    const apiUrlForMealTypes = new URL(`${request.url.split('/').slice(0, 3).join('/')}/api/mealtypes`);\n    const mealTypesResponse = await fetch(apiUrlForMealTypes.toString(), {\n      headers: {\n        Cookie: cookies || \"\"\n      }\n    });\n    let mealTypeOptions = [];\n    const mealTypesData = await mealTypesResponse.json();\n    mealTypeOptions = mealTypesData.mealTypes || [];\n    return json({\n      recipes: apiResponse.recipes,\n      pagination: {\n        currentPage: parseInt(page),\n        totalPages: Math.ceil(apiResponse.pagination.total / parseInt(perPage)),\n        totalRecipes: apiResponse.pagination.total\n      },\n      filters: {\n        categoryOptions,\n        mealTypeOptions,\n        preparationTimeMax: 120 // valeur arbitraire, peut \u00EAtre ajust\u00E9e\n      },\n      appliedFilters: {\n        search: searchQuery,\n        maxPreparationTime: maxPreparationTime ? parseInt(maxPreparationTime) : null,\n        categoryId: categoryId ? parseInt(categoryId) : null,\n        mealType,\n        sortBy,\n        sortDirection\n      },\n      error: false\n    });\n  } catch (error) {\n    console.error(\"Erreur lors du chargement des recettes:\", error);\n    return json({\n      recipes: [],\n      pagination: {\n        currentPage: 1,\n        totalPages: 0,\n        totalRecipes: 0\n      },\n      filters: {\n        categoryOptions: [],\n        mealTypeOptions: [],\n        preparationTimeMax: 120\n      },\n      appliedFilters: {\n        search: searchQuery,\n        mealType,\n        categoryId: null,\n        maxPreparationTime: maxPreparationTime ? parseInt(maxPreparationTime) : null,\n        sortBy: \"title\",\n        sortDirection: \"asc\"\n      },\n      error: error instanceof Error ? error.message : \"Impossible de charger les recettes.\"\n    });\n  }\n}\n\n// Hook personnalis\u00E9 pour le debounce\nfunction useDebounce(value, delay) {\n  _s();\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n}\n_s(useDebounce, \"KDuPAtDOgxm8PU6legVJOb3oOmA=\");\nexport default function RecipesIndex() {\n  _s2();\n  const {\n    recipes,\n    pagination,\n    filters,\n    appliedFilters,\n    error\n  } = useLoaderData();\n  const navigation = useNavigation();\n  const submit = useSubmit();\n  const navigate = useNavigate();\n\n  // State pour les filtres\n  const [search, setSearch] = useState(appliedFilters.search);\n  const [maxPreparationTime, setMaxPreparationTime] = useState(appliedFilters.maxPreparationTime);\n  const [category, setCategory] = useState(appliedFilters.categoryId?.toString() || \"\");\n  const [mealType, setMealType] = useState(appliedFilters.mealType);\n  const [sortBy, setSortBy] = useState(appliedFilters.sortBy);\n  const [sortDirection, setSortDirection] = useState(appliedFilters.sortDirection);\n\n  // \u00C9tat pour savoir si les filtres sont visibles sur mobile\n  const [filtersVisible, setFiltersVisible] = useState(false);\n\n  // Formulaire de r\u00E9f\u00E9rence\n  const formRef = useRef(null);\n\n  // Debounce la recherche\n  const debouncedSearch = useDebounce(search, 600);\n\n  // Effet pour soumettre le formulaire lorsque la recherche debounc\u00E9e change\n  useEffect(() => {\n    // Ne faire l'action que si la valeur a r\u00E9ellement chang\u00E9\n    if (debouncedSearch !== appliedFilters.search && formRef.current) {\n      // Cr\u00E9er un objet URLSearchParams pour construire la nouvelle URL\n      const searchParams = new URLSearchParams();\n\n      // Ajouter uniquement les param\u00E8tres non vides\n      if (debouncedSearch) searchParams.set(\"search\", debouncedSearch);\n      if (category) searchParams.set(\"categoryId\", category);\n      if (mealType) searchParams.set(\"mealType\", mealType);\n      if (maxPreparationTime) searchParams.set(\"maxPreparationTime\", maxPreparationTime.toString());\n      searchParams.set(\"sortBy\", sortBy);\n      searchParams.set(\"sortDirection\", sortDirection);\n      searchParams.set(\"page\", \"1\"); // Remettre \u00E0 la premi\u00E8re page lors d'une recherche\n\n      // Construire l'URL avec les nouveaux param\u00E8tres de recherche\n      const newUrl = `/recettes?${searchParams.toString()}`;\n\n      // Utiliser la navigation de Remix pour changer l'URL sans recharger la page\n      navigate(newUrl, {\n        replace: true\n      });\n    }\n  }, [debouncedSearch, appliedFilters.search, category, mealType, maxPreparationTime, sortBy, sortDirection]);\n\n  // Effets pour gestion des filtres\n  useEffect(() => {\n    setSearch(appliedFilters.search);\n    setMaxPreparationTime(appliedFilters.maxPreparationTime);\n    setCategory(appliedFilters.categoryId?.toString() || \"\");\n    setMealType(appliedFilters.mealType);\n    setSortBy(appliedFilters.sortBy);\n    setSortDirection(appliedFilters.sortDirection);\n  }, [appliedFilters]);\n\n  // Gestion des changements de recherche\n  const handleSearchChange = e => {\n    setSearch(e.target.value);\n    // La soumission est g\u00E9r\u00E9e par l'effet du debounce\n  };\n\n  // Mettre \u00E0 jour le tri\n  const handleSortChange = e => {\n    const value = e.target.value;\n    const [newSortBy, newSortDirection] = value.split(\"-\");\n    setSortBy(newSortBy);\n    setSortDirection(newSortDirection);\n    if (formRef.current) {\n      submit(formRef.current);\n    }\n  };\n\n  // R\u00E9initialiser les filtres\n  const resetFilters = useCallback(() => {\n    setSearch(\"\");\n    setMaxPreparationTime(null);\n    setSortBy(\"title\");\n    setSortDirection(\"asc\");\n  }, []);\n\n  // \u00C9tat de chargement\n  const isLoading = navigation.state === \"loading\" || navigation.state === \"submitting\";\n  return <Layout>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Statistiques des recettes */}\n        <div className=\"mb-8 text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n            {pagination.totalRecipes} recettes \u00E0 d\u00E9couvrir\n          </h2>\n          <p className=\"text-gray-600\">\n            Trouvez la recette parfaite pour votre Monsieur Cuisine Smart\n          </p>\n        </div>\n\n        {/* Bouton Filtres Mobile */}\n        <div className=\"md:hidden mb-4\">\n          <button type=\"button\" onClick={() => setFiltersVisible(true)} className=\"w-full py-3 flex items-center justify-center bg-white rounded-lg shadow-md text-rose-500 font-medium\">\n            <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\" />\n            </svg>\n            Filtrer les recettes\n          </button>\n        </div>\n\n        {/* Section principale avec filtres et recettes */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Filtres */}\n          <div className={`${filtersVisible ? 'fixed inset-0 z-50 bg-white md:bg-transparent md:relative md:inset-auto md:z-auto' : 'hidden'} md:block md:col-span-1 bg-white rounded-lg shadow-md p-6 self-start sticky top-24 overflow-auto max-h-screen md:max-h-[calc(100vh-120px)]`}>\n            <Form ref={formRef} method=\"get\" id=\"filter-form\" onChange={e => submit(e.currentTarget)}>\n              <h3 className=\"font-semibold text-lg mb-4 flex items-center justify-between\">\n                Filtres\n                <button type=\"button\" onClick={() => setFiltersVisible(false)} className=\"md:hidden text-gray-400 hover:text-gray-500\">\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </h3>\n\n              {/* Recherche */}\n              <div className=\"mb-6\">\n                <label htmlFor=\"search\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Rechercher\n                </label>\n                <div className=\"relative\">\n                  <input type=\"text\" name=\"search\" id=\"search\" placeholder=\"Nom de recette...\" value={search} onChange={handleSearchChange} className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-rose-500 focus:border-rose-500 sm:text-sm\" />\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n\n              {/* Filtre de categories */}\n              <div className=\"mb-6\">\n                <label htmlFor=\"categoryId\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Cat\u00E9gorie\n                </label>\n                <select id=\"categoryId\" name=\"categoryId\" value={category} onChange={e => setCategory(e.target.value)} className=\"block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-rose-500 focus:border-rose-500 sm:text-sm\">\n                  <option value=\"\">Toutes les cat\u00E9gories</option>\n                  {filters.categoryOptions?.map(option => <option key={option.id} value={option.id.toString()}>\n                      {option.title}\n                    </option>)}\n                </select>\n              </div>\n\n              {/* Filtre de type de repas */}\n              <div className=\"mb-6\">\n                <label htmlFor=\"mealType\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Type de repas\n                </label>\n                <select id=\"mealType\" name=\"mealType\" value={mealType} onChange={e => setMealType(e.target.value)} className=\"block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-rose-500 focus:border-rose-500 sm:text-sm\">\n                  <option value=\"\">Tous les types</option>\n                  {filters.mealTypeOptions?.map(option => <option key={option.title} value={option.title}>\n                      {option.title}\n                    </option>)}\n                </select>\n              </div>\n\n              {/* Temps de pr\u00E9paration */}\n              <div className=\"mb-6\">\n                <label htmlFor=\"maxPreparationTime\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Temps de pr\u00E9paration (max {maxPreparationTime || filters.preparationTimeMax} min)\n                </label>\n                <input type=\"range\" id=\"maxPreparationTime\" name=\"maxPreparationTime\" min=\"0\" max={filters.preparationTimeMax} step=\"10\" value={maxPreparationTime || filters.preparationTimeMax} onChange={e => setMaxPreparationTime(parseInt(e.target.value))} className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-rose-500\" />\n                <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                  <span>0 min</span>\n                  <span>{filters.preparationTimeMax} min</span>\n                </div>\n              </div>\n\n              {/* Tri */}\n              <div className=\"mb-6\">\n                <label htmlFor=\"sort\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Trier par\n                </label>\n                <select id=\"sort\" name=\"sort\" value={`${sortBy}-${sortDirection}`} onChange={handleSortChange} className=\"block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-rose-500 focus:border-rose-500 sm:text-sm\">\n                  <option value=\"title-asc\">Titre (A-Z)</option>\n                  <option value=\"title-desc\">Titre (Z-A)</option>\n                  <option value=\"preparationTime-asc\">Temps de pr\u00E9paration (croissant)</option>\n                  <option value=\"preparationTime-desc\">Temps de pr\u00E9paration (d\u00E9croissant)</option>\n                  <option value=\"note-desc\">Note (d\u00E9croissant)</option>\n                  <option value=\"note-asc\">Note (croissant)</option>\n                </select>\n              </div>\n\n              {/* Champs cach\u00E9s pour la pagination et le tri */}\n              <input type=\"hidden\" name=\"page\" value=\"1\" />\n              <input type=\"hidden\" name=\"sortBy\" value={sortBy} />\n              <input type=\"hidden\" name=\"sortDirection\" value={sortDirection} />\n\n              {/* Bouton r\u00E9initialiser */}\n              <button type=\"submit\" onClick={resetFilters} className=\"w-full py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500\">\n                R\u00E9initialiser les filtres\n              </button>\n            </Form>\n          </div>\n\n          {/* Grille des recettes */}\n          <div className=\"md:col-span-3\">\n            {error && <div className=\"mb-8 bg-red-50 border-l-4 border-red-500 p-4 text-red-700 text-center\">\n                {error}\n              </div>}\n\n            {/* Indicateur de chargement */}\n            {isLoading && <div className=\"flex justify-center my-8\">\n                <svg className=\"animate-spin h-8 w-8 text-rose-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n              </div>}\n\n            {!isLoading && recipes.length === 0 ? <div className=\"text-center py-12 bg-white rounded-lg shadow-md\">\n                <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                <h3 className=\"mt-2 text-lg font-medium text-gray-900\">Aucune recette trouv\u00E9e</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  Essayez d'ajuster vos filtres pour voir plus de r\u00E9sultats.\n                </p>\n                <div className=\"mt-6\">\n                  <Link to=\"/recettes\" className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-rose-600 hover:bg-rose-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500\">\n                    Voir toutes les recettes\n                  </Link>\n                </div>\n              </div> : <div className={`grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 ${isLoading ? 'opacity-50' : ''}`}>\n                {recipes.map((recipe, k) => <BoxRecipe recipe={recipe} key={k} />)}\n              </div>}\n\n            {/* Pagination */}\n            {pagination.totalPages > 1 && <nav className=\"flex justify-center mt-12\">\n                <ul className=\"flex space-x-2\">\n                  {/* Bouton page pr\u00E9c\u00E9dente */}\n                  <li>\n                    <Form method=\"get\" className=\"inline-block\">\n                      {/* Conserver les filtres */}\n                      <input type=\"hidden\" name=\"search\" value={search} />\n                      <input type=\"hidden\" name=\"mealType\" value={mealType} />\n                      {maxPreparationTime && <input type=\"hidden\" name=\"maxPreparationTime\" value={maxPreparationTime.toString()} />}\n                      <input type=\"hidden\" name=\"sortBy\" value={sortBy} />\n                      <input type=\"hidden\" name=\"sortDirection\" value={sortDirection} />\n                      <input type=\"hidden\" name=\"page\" value={(pagination.currentPage - 1).toString()} />\n\n                      <button type=\"submit\" disabled={pagination.currentPage <= 1} className={`px-4 py-2 rounded-md ${pagination.currentPage <= 1 ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-300'}`}>\n                        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 19l-7-7 7-7\" />\n                        </svg>\n                      </button>\n                    </Form>\n                  </li>\n\n                  {/* Pages centrales */}\n                  {[...Array(pagination.totalPages)].map((_, i) => {\n                const pageNumber = i + 1;\n\n                // Logique pour n'afficher que certaines pages dans la pagination\n                const shouldDisplay = pageNumber === 1 || pageNumber === pagination.totalPages || Math.abs(pageNumber - pagination.currentPage) <= 1;\n\n                // Afficher des ellipses pour les pages masqu\u00E9es\n                if (!shouldDisplay) {\n                  if (pageNumber === 2 || pageNumber === pagination.totalPages - 1) {\n                    return <li key={`ellipsis-${pageNumber}`} className=\"px-1 flex items-center\">\n                            <span className=\"text-gray-500\">...</span>\n                          </li>;\n                  }\n                  return null;\n                }\n                return <li key={pageNumber}>\n                        <Form method=\"get\" className=\"inline-block\">\n                          {/* Conserver les filtres */}\n                          <input type=\"hidden\" name=\"search\" value={search} />\n                          <input type=\"hidden\" name=\"mealType\" value={mealType} />\n                          {maxPreparationTime && <input type=\"hidden\" name=\"maxPreparationTime\" value={maxPreparationTime.toString()} />}\n                          <input type=\"hidden\" name=\"sortBy\" value={sortBy} />\n                          <input type=\"hidden\" name=\"sortDirection\" value={sortDirection} />\n                          <input type=\"hidden\" name=\"page\" value={pageNumber.toString()} />\n\n                          <button type=\"submit\" className={`w-10 h-10 rounded-md flex items-center justify-center ${pagination.currentPage === pageNumber ? 'bg-rose-500 text-white font-semibold' : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-300'}`}>\n                            {pageNumber}\n                          </button>\n                        </Form>\n                      </li>;\n              })}\n\n                  {/* Bouton page suivante */}\n                  <li>\n                    <Form method=\"get\" className=\"inline-block\">\n                      {/* Conserver les filtres */}\n                      <input type=\"hidden\" name=\"search\" value={search} />\n                      <input type=\"hidden\" name=\"mealType\" value={mealType} />\n                      {maxPreparationTime && <input type=\"hidden\" name=\"maxPreparationTime\" value={maxPreparationTime.toString()} />}\n                      <input type=\"hidden\" name=\"sortBy\" value={sortBy} />\n                      <input type=\"hidden\" name=\"sortDirection\" value={sortDirection} />\n                      <input type=\"hidden\" name=\"page\" value={(pagination.currentPage + 1).toString()} />\n\n                      <button type=\"submit\" disabled={pagination.currentPage >= pagination.totalPages} className={`px-4 py-2 rounded-md ${pagination.currentPage >= pagination.totalPages ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-300'}`}>\n                        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5l7 7-7 7\" />\n                        </svg>\n                      </button>\n                    </Form>\n                  </li>\n                </ul>\n              </nav>}\n          </div>\n        </div>\n      </div>\n    </Layout>;\n}\n_s2(RecipesIndex, \"h+UqRWE0x8mtLIfhh5AgHOHUJxQ=\", false, function () {\n  return [useLoaderData, useNavigation, useSubmit, useNavigate, useDebounce];\n});\n_c = RecipesIndex;\nvar _c;\n$RefreshReg$(_c, \"RecipesIndex\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
