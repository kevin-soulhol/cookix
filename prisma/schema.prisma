generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Recipe {
  id              Int                @id @default(autoincrement())
  title           String
  description     String?            @db.Text
  preparationTime Int?
  cookingTime     Int?
  servings        Int?
  difficulty      String?
  note            Decimal?           @db.Decimal(3, 1)
  imageUrl        String?
  sourceUrl       String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  favorites       Favorite[]
  menuItems       MenuItem[]
  ingredients     RecipeIngredient[]
  steps           RecipeStep[]
}

model Ingredient {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  recipeIngredients RecipeIngredient[]
  shoppingItems     ShoppingItem[]
}

model RecipeIngredient {
  id           Int        @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  quantity     Float?
  unit         String?
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, ingredientId])
  @@index([ingredientId], map: "RecipeIngredient_ingredientId_fkey")
}

model RecipeStep {
  id          Int    @id @default(autoincrement())
  recipeId    Int
  stepNumber  Int
  instruction String @db.Text
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, stepNumber])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([recipeId], map: "Favorite_recipeId_fkey")
}

model Menu {
  id        Int         @id @default(autoincrement())
  userId    Int
  startDate DateTime
  endDate   DateTime
  createdAt DateTime    @default(now())
  menuItems MenuItem[]
  shares    MenuShare[]
}

model MenuItem {
  id       Int    @id @default(autoincrement())
  menuId   Int
  recipeId Int
  menu     Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@index([recipeId], map: "MenuItem_recipeId_fkey")
}

model MenuShare {
  id                  Int           @id @default(autoincrement())
  menuId              Int
  shoppingListId      Int? // Ajout de cette référence
  sharedByUserId      Int
  sharedWithEmail     String
  sharedWithUserId    Int? // Pour stocker l'ID de l'utilisateur qui accepte
  token               String        @unique
  isAccepted          Boolean       @default(false)
  acceptedAt          DateTime?
  includeShoppingList Boolean       @default(true) // Option pour inclure la liste ou non
  createdAt           DateTime      @default(now())
  menu                Menu          @relation(fields: [menuId], references: [id], onDelete: Cascade)
  shoppingList        ShoppingList? @relation(fields: [shoppingListId], references: [id], onDelete: SetNull)
  sharedByUser        User          @relation("SharedByUser", fields: [sharedByUserId], references: [id], onDelete: Cascade)
  sharedWithUser      User?         @relation("SharedWithUser", fields: [sharedWithUserId], references: [id], onDelete: SetNull)
  User                User?         @relation(fields: [userId], references: [id])
  userId              Int?

  @@index([menuId], map: "MenuShare_menuId_fkey")
  @@index([sharedByUserId], map: "MenuShare_sharedByUserId_fkey")
  @@index([shoppingListId], map: "MenuShare_shoppingListId_fkey")
  @@index([sharedWithUserId], map: "MenuShare_sharedWithUserId_fkey")
}

model ShoppingList {
  id        Int            @id @default(autoincrement())
  userId    Int
  createdAt DateTime       @default(now())
  items     ShoppingItem[]
  MenuShare MenuShare[]
}

model ShoppingItem {
  id             Int          @id @default(autoincrement())
  shoppingListId Int
  ingredientId   Int
  quantity       Float?
  unit           String?
  isChecked      Boolean      @default(false)
  ingredient     Ingredient   @relation(fields: [ingredientId], references: [id])
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)

  @@unique([shoppingListId, ingredientId])
  @@index([ingredientId], map: "ShoppingItem_ingredientId_fkey")
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique // Ajout de l'unicité
  password      String
  sharedMenus   MenuShare[] @relation("SharedByUser")
  receivedMenus MenuShare[] @relation("SharedWithUser") // Nouvelle relation
  MenuShare     MenuShare[]
}
